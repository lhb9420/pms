<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.OvertimeMapper">
  <resultMap id="BaseResultMap" type="entity.Overtime">
    <id column="overtime_id" jdbcType="INTEGER" property="overtimeId" />
    <result column="employee_id" jdbcType="INTEGER" property="employeeId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="record1" jdbcType="TIMESTAMP" property="record1" />
    <result column="record2" jdbcType="TIMESTAMP" property="record2" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    overtime_id, employee_id, name, record1, record2, create_date
  </sql>
  <select id="selectByExample" parameterType="entity.OvertimeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from overtime_inf
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from overtime_inf
    where overtime_id = #{overtimeId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from overtime_inf
    where overtime_id = #{overtimeId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="entity.OvertimeExample">
    delete from overtime_inf
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="entity.Overtime">
    insert into overtime_inf (overtime_id, employee_id, name, 
      record1, record2, create_date
      )
    values (#{overtimeId,jdbcType=INTEGER}, #{employeeId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, 
      #{record1,jdbcType=TIMESTAMP}, #{record2,jdbcType=TIMESTAMP}, #{createDate,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="entity.Overtime">
    insert into overtime_inf
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="overtimeId != null">
        overtime_id,
      </if>
      <if test="employeeId != null">
        employee_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="record1 != null">
        record1,
      </if>
      <if test="record2 != null">
        record2,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="overtimeId != null">
        #{overtimeId,jdbcType=INTEGER},
      </if>
      <if test="employeeId != null">
        #{employeeId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="record1 != null">
        #{record1,jdbcType=TIMESTAMP},
      </if>
      <if test="record2 != null">
        #{record2,jdbcType=TIMESTAMP},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="entity.OvertimeExample" resultType="java.lang.Long">
    select count(*) from overtime_inf
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update overtime_inf
    <set>
      <if test="record.overtimeId != null">
        overtime_id = #{record.overtimeId,jdbcType=INTEGER},
      </if>
      <if test="record.employeeId != null">
        employee_id = #{record.employeeId,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.record1 != null">
        record1 = #{record.record1,jdbcType=TIMESTAMP},
      </if>
      <if test="record.record2 != null">
        record2 = #{record.record2,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createDate != null">
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update overtime_inf
    set overtime_id = #{record.overtimeId,jdbcType=INTEGER},
      employee_id = #{record.employeeId,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      record1 = #{record.record1,jdbcType=TIMESTAMP},
      record2 = #{record.record2,jdbcType=TIMESTAMP},
      create_date = #{record.createDate,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="entity.Overtime">
    update overtime_inf
    <set>
      <if test="employeeId != null">
        employee_id = #{employeeId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="record1 != null">
        record1 = #{record1,jdbcType=TIMESTAMP},
      </if>
      <if test="record2 != null">
        record2 = #{record2,jdbcType=TIMESTAMP},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where overtime_id = #{overtimeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="entity.Overtime">
    update overtime_inf
    set employee_id = #{employeeId,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      record1 = #{record1,jdbcType=TIMESTAMP},
      record2 = #{record2,jdbcType=TIMESTAMP},
      create_date = #{createDate,jdbcType=TIMESTAMP}
    where overtime_id = #{overtimeId,jdbcType=INTEGER}
  </update>
</mapper>