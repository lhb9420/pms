<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.SalaryMapper">
  <resultMap id="BaseResultMap" type="entity.Salary">
    <id column="salary_id" jdbcType="INTEGER" property="salaryId" />
    <result column="employee_id" jdbcType="INTEGER" property="employeeId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="month" jdbcType="INTEGER" property="month" />
    <result column="base_salary" jdbcType="INTEGER" property="baseSalary" />
    <result column="overtime_salary" jdbcType="INTEGER" property="overtimeSalary" />
    <result column="bonus" jdbcType="INTEGER" property="bonus" />
    <result column="total" jdbcType="INTEGER" property="total" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    salary_id, employee_id, name, month, base_salary, overtime_salary, bonus, total
  </sql>
  <select id="selectByExample" parameterType="entity.SalaryExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from salary_inf
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from salary_inf
    where salary_id = #{salaryId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from salary_inf
    where salary_id = #{salaryId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="entity.SalaryExample">
    delete from salary_inf
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="entity.Salary">
    insert into salary_inf (salary_id, employee_id, name, 
      month, base_salary, overtime_salary, 
      bonus, total)
    values (#{salaryId,jdbcType=INTEGER}, #{employeeId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, 
      #{month,jdbcType=INTEGER}, #{baseSalary,jdbcType=INTEGER}, #{overtimeSalary,jdbcType=INTEGER}, 
      #{bonus,jdbcType=INTEGER}, #{total,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="entity.Salary">
    insert into salary_inf
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="salaryId != null">
        salary_id,
      </if>
      <if test="employeeId != null">
        employee_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="month != null">
        month,
      </if>
      <if test="baseSalary != null">
        base_salary,
      </if>
      <if test="overtimeSalary != null">
        overtime_salary,
      </if>
      <if test="bonus != null">
        bonus,
      </if>
      <if test="total != null">
        total,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="salaryId != null">
        #{salaryId,jdbcType=INTEGER},
      </if>
      <if test="employeeId != null">
        #{employeeId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="month != null">
        #{month,jdbcType=INTEGER},
      </if>
      <if test="baseSalary != null">
        #{baseSalary,jdbcType=INTEGER},
      </if>
      <if test="overtimeSalary != null">
        #{overtimeSalary,jdbcType=INTEGER},
      </if>
      <if test="bonus != null">
        #{bonus,jdbcType=INTEGER},
      </if>
      <if test="total != null">
        #{total,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="entity.SalaryExample" resultType="java.lang.Long">
    select count(*) from salary_inf
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update salary_inf
    <set>
      <if test="record.salaryId != null">
        salary_id = #{record.salaryId,jdbcType=INTEGER},
      </if>
      <if test="record.employeeId != null">
        employee_id = #{record.employeeId,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.month != null">
        month = #{record.month,jdbcType=INTEGER},
      </if>
      <if test="record.baseSalary != null">
        base_salary = #{record.baseSalary,jdbcType=INTEGER},
      </if>
      <if test="record.overtimeSalary != null">
        overtime_salary = #{record.overtimeSalary,jdbcType=INTEGER},
      </if>
      <if test="record.bonus != null">
        bonus = #{record.bonus,jdbcType=INTEGER},
      </if>
      <if test="record.total != null">
        total = #{record.total,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update salary_inf
    set salary_id = #{record.salaryId,jdbcType=INTEGER},
      employee_id = #{record.employeeId,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      month = #{record.month,jdbcType=INTEGER},
      base_salary = #{record.baseSalary,jdbcType=INTEGER},
      overtime_salary = #{record.overtimeSalary,jdbcType=INTEGER},
      bonus = #{record.bonus,jdbcType=INTEGER},
      total = #{record.total,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="entity.Salary">
    update salary_inf
    <set>
      <if test="employeeId != null">
        employee_id = #{employeeId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="month != null">
        month = #{month,jdbcType=INTEGER},
      </if>
      <if test="baseSalary != null">
        base_salary = #{baseSalary,jdbcType=INTEGER},
      </if>
      <if test="overtimeSalary != null">
        overtime_salary = #{overtimeSalary,jdbcType=INTEGER},
      </if>
      <if test="bonus != null">
        bonus = #{bonus,jdbcType=INTEGER},
      </if>
      <if test="total != null">
        total = #{total,jdbcType=INTEGER},
      </if>
    </set>
    where salary_id = #{salaryId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="entity.Salary">
    update salary_inf
    set employee_id = #{employeeId,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      month = #{month,jdbcType=INTEGER},
      base_salary = #{baseSalary,jdbcType=INTEGER},
      overtime_salary = #{overtimeSalary,jdbcType=INTEGER},
      bonus = #{bonus,jdbcType=INTEGER},
      total = #{total,jdbcType=INTEGER}
    where salary_id = #{salaryId,jdbcType=INTEGER}
  </update>
</mapper>